Src_tree:
In this directory, you will find functions used to implement the actual tree functionality. We would like to remind the reader that all our files and directories are stored in the data structure imsfs_tree_node defined by us. 
Functions in this directory-
add_dir_node() and add_file_node() create nodes for directories and files. They will be used when commands such as mkdir and touch are called.
assign_mex() find the smallest whole number position at which a pointer to a child node has not been defined, and assigns a pointer to point to the child directory in question
change_node_location(): Moves a node from one location in the file system to another. If the node is a directory node, the entire subtree rooted at it is moved.
check_leaf(): Checks if the specified node is a leaf node or not
error_msg(): Helper function for error handling
find_pos(): Finds the position of child with respect to the parent node
free_dir_node_recursive(): Unlinks and frees up memory for a leaf directory node.
free_file_node(): Unlikes and frees up memory for a file node
get_dir_node(): Takes path as argument and return the pointer to the node only if it is a directory node
get_file_node(): Takes path as argument and return the pointer to the node only if it is a file node
get_node(): Takes path string, resolves it into an existing node from the tree and returns that.
initialise_imsfs(): Initialises the data structure. Defines a root node as well 
name_from_path(): Extracts name from entire path 
parent_from_path(): Extracts parent address from entire path 
parent_node_from_path(): Returns parent node from the given path
print_node_data(): Prints all data stored in the node
recursive_path_update(): Once a directory’s location is changed, we have to change the locations of all the nodes in the subtree rooted at that node. This function does just that.
remove_empty_dir(): If the node is a directory node and it has no children, the node gets removed by this function.
remove_empty_dir(): If the node is a file node, the node gets removed by this function.
rename_node(): Changes the name of the specified node(if the node is a directory node, we have update the paths of all its children, and their children and so on)


Src_search: In this directory, we have defined all those functions that enable us to search through our filesystem based on our tags(prefix search or substring match)
check_tag(): Checks if the search keyword is supported or not(currently, “PREFIX” or “SUBSTR”).
create_search_object(): This object contains the data that will be used to filter out the files to our search buffer. For eg, it contains either the prefix, substring or both.
free_search_object(): Clears the search object and deallocates its memory.
get_search_object(): From the search command typed, create the search object with the prefix pointers and the substring pointers pointing to the appropriate keywords
get_tag_ptr(): Get the pointer for tag depending on the input string
is_search_query(): Returns true if the command typed is for using the searchability feature of the file system
match_node(): Find out whether the given node matches the criteria of the search object
tree_search_fill(): A tree-wide search to fill the search buffer with the files that satisfy the search criteria



src_use 
Here, we have functions that we will need after typing ./USE/… We access the search buffer filled by typing ls ./FIND/… We can make use of the nodes present in the search buffer. In addition to this, there are functions that allow us to add more nodes to the buffer, remove particular nodes, and even the flush out the contents of the buffer completely
add_to_search_buffer(): Add the given node into the search buffer that has been defined in the search directory
free_search_buffer(): Flush out all node-entries from the search buffer, deallocate/free up it’s memory
get_file_name_use(): Extract the filename from a “USE” command
get_node_from_search_buffer(): Search through the buffer to get the node referred to by the filename
is_use_query(): Returns true if the command typed is for making use of the search buffer, that is, if the command has the following format- <command> ./USE/…
remove_node_from_search_buffer(): Remove the given node from the search buffer
